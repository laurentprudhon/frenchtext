# AUTOGENERATED! DO NOT EDIT! File to edit: 01_datasets.ipynb (unless otherwise specified).

__all__ = ['list_datasets', 'datasetsdf', 'read_download_info', 'download_all_datasets', 'download_dataset_file',
           'downloaddf', 'read_dataset_file', 'read_urls_file']

# Cell
import numpy as np
import pandas as pd
pd.options.display.max_rows = 100
pd.options.display.max_columns = 50

# Cell
from .core import *

# Cell
def list_datasets():
    return pd.read_csv(config.libdata /"datasets"/"datasets.csv",sep=';')

datasetsdf = list_datasets()

# Cell
def read_download_info():
    return pd.read_csv(config.libdata /"datasets"/"download_info.csv",sep=';')

downloaddf = read_download_info()

def download_all_datasets():
    for datasetfile in datasetsdf['DatasetFile'].unique():
        download_dataset_file(datasetfile)

import math

def download_dataset_file(datasetfile):
    row = downloaddf[downloaddf["DatasetFile"]==datasetfile].iloc[0]
    url = row["DownloadUrl"]
    size = row["FileSize"]
    print(f"Downloading dataset file : {datasetfile} ({math.floor(size/1024/1024)} MB)")
    download_url(url, config.datasets / (datasetfile+".dataset.feather"), size)
    print("Done")

# Cell
def read_dataset_file(datasetfile):
    datasetdffile = config.datasets / (datasetfile+".dataset.feather")
    if(datasetdffile.exists()):
        datasetdf = pd.read_feather(datasetdffile)
        print(f"Loaded dataframe for dataset {datasetfile} : {len(datasetdf)} text blocks")
        return datasetdf
    else:
        raise Exception(f"No dataframe for dataset {datasetfile}")

# Cell
def read_urls_file(website):
    if isinstance(website,int):
        website = datasetsdf.loc[datasetsdf["Website"] == website,"UrlsFile"].values[0]
    if not isinstance(website,str):
         raise Exception("website param should be int or str")
    urlsdffile = config.datasets / (website+".urls.dataframe.feather")
    if(urlsdffile.exists()):
        urlsdf = pd.read_feather(urlsdffile)
        print(f"Loaded urls dataframe for website {website} : {len(urlsdf)} urls")
        return urlsdf
    else:
        raise Exception(f"No urls dataframe for website {website}")